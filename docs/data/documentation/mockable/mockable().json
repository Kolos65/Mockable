{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"attribute","text":"@attached"},{"kind":"text","text":"(peer, names: prefixed(Mock)) "},{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Mockable"},{"kind":"text","text":"()"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The generated implementation is named with a “Mock” prefix followed by the protocol name."},{"type":"text","text":" "},{"type":"text","text":"By default, the generated code is enclosed in an "},{"type":"codeVoice","code":"#if MOCKING"},{"type":"text","text":" condition, ensuring it is only accessible"},{"type":"text","text":" "},{"type":"text","text":"in modules where the "},{"type":"codeVoice","code":"MOCKING"},{"type":"text","text":" compile-time condition is set."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example usage:"}]},{"type":"codeListing","syntax":"swift","code":["@Mockable","protocol UserService {","    func get(id: UUID) -> User","    func remove(id: UUID) throws","}","","var mockUserService: MockUserService","","func test() {","    let error: UserError = .invalidId","    let mockUser = User(id: UUID())","","    given(mockUserService)","        .get(id: .any).willReturn(mockUser)","        .remove(id: .any).willThrow(error)","","    try await loginService.login()","","    verify(mockUserService)","        .get(id: .value(mockUser.id)).called(count: .once)","        .remove(id: .any).called(count: .never)","}"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/mockable\/mockable()"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Mockable\/documentation\/Mockable\/Mockable()","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A peer macro that generates a mock implementation for the protocol it is attached to."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Mockable"},{"kind":"text","text":"()"}],"title":"Mockable()","roleHeading":"Macro","role":"symbol","symbolKind":"macro","externalID":"s:8MockableAAyycfm","modules":[{"name":"Mockable"}]},"hierarchy":{"paths":[["doc:\/\/Mockable\/documentation\/Mockable"]]},"references":{"doc://Mockable/documentation/Mockable/Mockable()":{"role":"symbol","title":"Mockable()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Mockable"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"A peer macro that generates a mock implementation for the protocol it is attached to."}],"identifier":"doc:\/\/Mockable\/documentation\/Mockable\/Mockable()","kind":"symbol","type":"topic","url":"\/documentation\/mockable\/mockable()"},"doc://Mockable/documentation/Mockable":{"role":"collection","title":"Mockable","abstract":[{"type":"text","text":"A macro driven testing framework that provides automatic mock implementations for your protocols. It offers an intuitive declarative syntax that simplifies the process of mocking services in unit tests."}],"identifier":"doc:\/\/Mockable\/documentation\/Mockable","kind":"symbol","type":"topic","url":"\/documentation\/mockable"}}}