{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Given a protocol annotated with the "},{"type":"codeVoice","code":"@Mockable"},{"type":"text","text":" macro:"}]},{"type":"codeListing","syntax":"swift","code":["import Mockable","","@Mockable","protocol ProductService {","    var url: URL? { get set }","    func fetch(for id: UUID) async throws -> Product","    func checkout(with product: Product) throws","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A mock implementation named "},{"type":"codeVoice","code":"MockProductService"},{"type":"text","text":" will be generated, that can be used in unit tests like this:"}]},{"type":"codeListing","syntax":"swift","code":["import Mockable","","lazy var productService = MockProductService()","lazy var cartService = CartServiceImpl(productService: productService)","","func testCartService() async throws {","    let mockURL = URL(string: \"apple.com\")","    let mockError: ProductError = .notFound","    let mockProduct = Product(name: \"iPhone 15 Pro\")","","    given(productService)","        .fetch(for: .any).willReturn(mockProduct)","        .checkout(with: .any).willThrow(mockError)","","    try await cartService.checkout(with: mockProduct, using: mockURL)","","    verify(productService)","        .fetch(for: .value(mockProduct.id)).called(.atLeastOnce)","        .checkout(with: .value(mockProduct)).called(.once)","        .url(newValue: .value(mockURL)).setCalled(.once)","}"]},{"anchor":"Syntax","level":2,"type":"heading","text":"Syntax"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Mockable"}]},{"type":"text","text":" has a declarative syntax that utilizes builders to construct "},{"type":"codeVoice","code":"given"},{"type":"text","text":", "},{"type":"codeVoice","code":"when"},{"type":"text","text":", and "},{"type":"codeVoice","code":"verify"},{"type":"text","text":" clauses."},{"type":"text","text":" "},{"type":"text","text":"When constructing any of these clauses, you always follow the same syntax:"}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"clause type"},{"type":"text","text":"("},{"type":"codeVoice","code":"service"},{"type":"text","text":")."},{"type":"codeVoice","code":"function builder"},{"type":"text","text":"."},{"type":"codeVoice","code":"behavior builder"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the following example where we use the previously introduced product service:"}]},{"type":"codeListing","syntax":"swift","code":["let id = UUID()","let error: ProductError = .notFound","","given(productService).fetch(for: .value(id)).willThrow(error)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We specify the following:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"codeVoice","code":"given"}]},{"type":"text","text":": we want to register "},{"type":"strong","inlineContent":[{"type":"text","text":"return values"}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"codeVoice","code":"(productService)"}]},{"type":"text","text":": we specify what mockable service we want to register return values for"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"codeVoice","code":".fetch(for: .value(id))"}]},{"type":"text","text":": we want to mock the "},{"type":"codeVoice","code":"fetch(for:)"},{"type":"text","text":" method and constrain our behavior on calls with matching "},{"type":"codeVoice","code":"id"},{"type":"text","text":" parameters"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"codeVoice","code":".willThrow(error)"}]},{"type":"text","text":": if "},{"type":"codeVoice","code":"fetch(for:)"},{"type":"text","text":" is called with the specified parameter value, we want an "},{"type":"strong","inlineContent":[{"type":"text","text":"error"}]},{"type":"text","text":" to be thrown"}]}]}]},{"anchor":"Parameters","level":2,"type":"heading","text":"Parameters"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Function builders have "},{"type":"strong","inlineContent":[{"type":"text","text":"all parameters"}]},{"type":"text","text":" from the original requirement but "},{"type":"strong","inlineContent":[{"type":"text","text":"encapsulate them"}]},{"type":"text","text":" within the "},{"type":"reference","isActive":true,"identifier":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/parameter"},{"type":"text","text":" type."},{"type":"text","text":" "},{"type":"text","text":"When constructing mockable clauses, you have to "},{"type":"strong","inlineContent":[{"type":"text","text":"specify parameter conditions"}]},{"type":"text","text":" for every parameter of a function. There are three available options:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"codeVoice","code":".any"}]},{"type":"text","text":": Matches every call to the specified function, disregarding the actual parameter values."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"codeVoice","code":".value(Value)"}]},{"type":"text","text":": Matches to calls with an identical value in the specified parameter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"codeVoice","code":".matching((Value) -> Bool)"}]},{"type":"text","text":": Uses the provided closure to filter functions calls."}]}]}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Computed properties have no parameters, but mutable properties get a "},{"type":"codeVoice","code":"(newValue:)"},{"type":"text","text":" parameter in function builders that can be used"},{"type":"text","text":" "},{"type":"text","text":"to constraint functionality on property assignment with a match condition. These "},{"type":"codeVoice","code":"newValue"},{"type":"text","text":" conditions will only effect the "},{"type":"codeVoice","code":"performOnGet"},{"type":"text","text":", "},{"type":"codeVoice","code":"performOnSet"},{"type":"text","text":", "},{"type":"codeVoice","code":"getCalled"},{"type":"text","text":" and "},{"type":"codeVoice","code":"setCalled"},{"type":"text","text":" "},{"type":"text","text":"clauses but will have no effect on return clauses."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here are examples of using different parameter conditions:"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ throw an error when `fetch(for:)` is called with `id`","given(productService).fetch(for: .value(id)).willThrow(error)","","\/\/ print \"Ouch!\" if product service is called with a product named \"iPhone 15 Pro\"","when(productService)","  .checkout(with: .matching { $0.name == \"iPhone 15 Pro\" })","  .perform { print(\"Ouch!\") }","","\/\/ assert if the fetch(for:) was called exactly once regardless of what id parameter it was called with","verify(productService).fetch(for: .any).called(.once)"]},{"anchor":"Given","level":2,"type":"heading","text":"Given"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Return values can be specified using a "},{"type":"codeVoice","code":"given(_ service:)"},{"type":"text","text":" clause. There are three return builders available:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/functionreturnbuilder\/willreturn(_:)"},{"type":"text","text":": Will store the given return value and use it to mock subsequent calls."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/throwingfunctionreturnbuilder\/willthrow(_:)"},{"type":"text","text":": Will store the given error and throw it in subsequent calls. Only available for throwing functions and properties."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/throwingfunctionreturnbuilder\/willproduce(_:)"},{"type":"text","text":": Will use the provided closure for mocking. The closure has the same signature as the mocked function, so for example a function that takes an integer returns a string and can throw will accept a closure of type "},{"type":"codeVoice","code":"(Int) throws -> String"},{"type":"text","text":"."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The provided return values are used up in FIFO order and the last one is always kept for any further calls. Here are examples of using return clauses:"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Throw an error for the first call and then return 'product' for every other call","given(productService)","    .fetch(for: .any).willThrow(error)","    .fetch(for: .any).willReturn(product)","","\/\/ Throw an error if the id parameter ends with a 0, return a product otherwise","given(productService)","    .fetch(for: .any).willProduce { id in","        if id.uuidString.last == \"0\" {","            throw error","        } else {","            return product","        }","    }"]},{"anchor":"When","level":2,"type":"heading","text":"When"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Side effects can be added using "},{"type":"codeVoice","code":"when(_ service:)"},{"type":"text","text":" clauses. There are three kind of side effects:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/functionactionbuilder\/perform(_:)"},{"type":"text","text":": Will register an operation to perform on invocations of the mocked function."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/propertyactionbuilder\/performonget(_:)"},{"type":"text","text":": Available for mutable properties only, will perform the provided operation on property access."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/propertyactionbuilder\/performonset(_:)"},{"type":"text","text":": Available for mutable properties only, will perform the provided operation on property assignment."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Some examples of using side effects are:"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ log calls to fetch(for:)","when(productService).fetch(for: .any).perform {","    print(\"fetch(for:) was called\")","}","","\/\/ log when url is accessed","when(productService).url().performOnGet {","    print(\"url accessed\")","}","","\/\/ log when url is set to nil","when(productService).url(newValue: .value(nil)).performOnSet {","    print(\"url set to nil\")","}"]},{"anchor":"Verify","level":2,"type":"heading","text":"Verify"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can verify invocations of your mock service using the "},{"type":"codeVoice","code":"verify(_ service:)"},{"type":"text","text":" clause."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Mockable"}]},{"type":"text","text":" supports both "},{"type":"emphasis","inlineContent":[{"type":"text","text":"XCTest"}]},{"type":"text","text":" and "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Swift Testing"}]},{"type":"text","text":" by using Pointfree’s "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/pointfreeco\/swift-issue-reporting"},{"type":"text","text":" to dynamically report test failures with the appropriate test framework."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are three kind of verifications:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/functionverifybuilder\/called(_:file:line:)"},{"type":"text","text":": Asserts invocation count based on the given value."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/propertyverifybuilder\/getcalled(_:file:line:)"},{"type":"text","text":": Available for mutable properties only, asserts property access count."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/propertyverifybuilder\/setcalled(_:file:line:)"},{"type":"text","text":": Available for mutable properties only, asserts property assignment count."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here are some example assertions:"}]},{"type":"codeListing","syntax":"swift","code":["verify(productService)","    \/\/ assert fetch(for:) was called between 1 and 5 times","    .fetch(for: .any).called(.from(1, to: 5))","    \/\/ assert checkout(with:) was called between exactly 10 times","    .checkout(with: .any).called(10)","    \/\/ assert url property was accessed at least 2 times","    .url().get(.moreOrEqual(to: 2))","    \/\/ assert url property was never set to nil","    .url(newValue: .value(nil)).setCalled(.never)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are testing asynchronous code and cannot write sync assertions you can use the async counterparts of the above verifications:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/functionverifybuilder\/calledeventually(_:before:file:line:)"},{"type":"text","text":": Wait until timeout or invocation count satisfied."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/propertyverifybuilder\/getcalledeventually(_:before:file:line:)"},{"type":"text","text":": Wait until timeout or property access count satisfied."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/propertyverifybuilder\/setcalledeventually(_:before:file:line:)"},{"type":"text","text":": Wait until timeout or property assignment count satisfied."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here are some examples of async verifications:"}]},{"type":"codeListing","syntax":"swift","code":["await verify(productService)","    \/\/ assert fetch(for:) was called between 1 and 5 times before default timeout (1 second)","    .fetch(for: .any).calledEventually(.from(1, to: 5))","    \/\/ assert checkout(with:) was called between exactly 10 times before 3 seconds","    .checkout(with: .any).calledEventually(10, before: .seconds(3))","    \/\/ assert url property was accessed at least 2 times before default timeout (1 second)","    .url().getCalledEventually(.moreOrEqual(to: 2))","    \/\/ assert url property was set to nil once","    .url(newValue: .value(nil)).setCalledEventually(.once)"]},{"anchor":"Relaxed-Mode","level":2,"type":"heading","text":"Relaxed Mode"},{"type":"paragraph","inlineContent":[{"type":"text","text":"By default, you must specify a return value for all requirements; otherwise, a fatal error will be thrown. The reason for this is to aid in the discovery (and thus the verification) of every called function when writing unit tests."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, it is common to prefer avoiding this strict default behavior in favor of a more relaxed setting, where,"},{"type":"text","text":" "},{"type":"text","text":"for example, void or optional return values do not need explicit "},{"type":"codeVoice","code":"given"},{"type":"text","text":" registration."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the Use "},{"type":"reference","isActive":true,"identifier":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/mockerpolicy"},{"type":"text","text":" (which is an "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/optionset"},{"type":"text","text":") to implicitly mock:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"only one kind of return value: "},{"type":"codeVoice","code":".relaxedMocked"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"construct a custom set of policies: "},{"type":"codeVoice","code":"[.relaxedVoid, .relaxedOptional]"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"or opt for a fully relaxed mode: "},{"type":"codeVoice","code":".relaxed"},{"type":"text","text":"."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You have two options to override the default strict behavior of the library:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"At "},{"type":"strong","inlineContent":[{"type":"text","text":"mock implementation level"}]},{"type":"text","text":" you can override the mocker policy for each individual mock implementation in the initializer:"}]},{"type":"codeListing","syntax":"swift","code":["let relaxedMock = MockService(policy: [.relaxedOptional, .relaxedVoid])"]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"At "},{"type":"strong","inlineContent":[{"type":"text","text":"project level"}]},{"type":"text","text":" you can set a custom default policy to use in every scenario by changing the default property of "},{"type":"strong","inlineContent":[{"type":"text","text":"MockerPolicy"}]},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["MockerPolicy.default = .relaxedVoid"]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":".relaxedMocked"},{"type":"text","text":" policy in combination with the "},{"type":"reference","isActive":true,"identifier":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/mocked"},{"type":"text","text":" protocol can be used to set an implicit return value for custom (or even built in) types:"}]},{"type":"codeListing","syntax":"swift","code":["struct Car {","    var name: String","    var seats: Int","}","","extension Car: Mocked {","    static var mock: Car {","        Car(name: \"Mock Car\", seats: 4)","    }","","    \/\/ Defaults to [mock] but we can ","    \/\/ provide a custom array of cars:","    static var mocks: [Car] {","        [","            Car(name: \"Mock Car 1\", seats: 4),","            Car(name: \"Mock Car 2\", seats: 4)","        ]","    }","}","","@Mockable","protocol CarService {","    func getCar() -> Car","    func getCars() -> [Car]","}","","func testCarService() {","    func test() {","        let mock = MockCarService(policy: .relaxedMocked)","        \/\/ Implictly mocked without a given registration:","        let car = mock.getCar()","        let cars = mock.getCars()","    }","}"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"⚠️ Relaxed mode will not work with generic return values as the type system is unable to locate the appropriate generic overload."}]}],"type":"aside","name":"Note"},{"anchor":"Working-with-non-equatable-Types","level":2,"type":"heading","text":"Working with non-equatable Types"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Mockable"}]},{"type":"text","text":" uses a "},{"type":"reference","isActive":true,"identifier":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/matcher"},{"type":"text","text":" internally to compare parameters."},{"type":"text","text":" "},{"type":"text","text":"By default the matcher is able to compare any custom type that conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" (except when used in a generic function)."},{"type":"text","text":" "},{"type":"text","text":"In special cases, when you"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"have non-equatable parameter types"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"need testing specific equality logic for a custom type"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"have generic functions that are used with custom concrete types"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"you can register your custom types with the "},{"type":"codeVoice","code":"Matcher.register()"},{"type":"text","text":" functions."},{"type":"text","text":" "},{"type":"text","text":"Here is how to do it:"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ register an equatable type to the matcher because we use it in a generic function","Matcher.register(SomeEquatableType.self)","","\/\/ register a non-equatable type to the matcher","Matcher.register(Product.self, match: { $0.name == $1.name })","","\/\/ register a meta-type to the matcher","Matcher.register(HomeViewController.Type.self)","","\/\/ remove all previously registered custom types","Matcher.reset()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you see this error during tests:"}]},{"type":"codeListing","syntax":null,"code":["No comparator found for type XYZ. All non-equatable types must be ","registered using Matcher.register(_)."]},{"type":"paragraph","inlineContent":[{"type":"text","text":"remember to add the noted type to your "},{"type":"codeVoice","code":"Matcher"},{"type":"text","text":" using the "},{"type":"codeVoice","code":"register()"},{"type":"text","text":" function."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/mockable\/usage"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Mockable\/documentation\/Mockable\/Usage","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Larn how to use "},{"type":"strong","inlineContent":[{"type":"text","text":"Mockable"}]},{"type":"text","text":" to write readable and concise unit tests."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Usage","role":"article","modules":[{"name":"Mockable"}]},"hierarchy":{"paths":[["doc:\/\/Mockable\/documentation\/Mockable"]]},"seeAlsoSections":[{"title":"Guides","identifiers":["doc:\/\/Mockable\/documentation\/Mockable\/Installation","doc:\/\/Mockable\/documentation\/Mockable\/Configuration"],"generated":true}],"references":{"https://kolos65.github.io/Mockable/documentation/mockable/matcher":{"title":"Matcher","titleInlineContent":[{"type":"codeVoice","code":"Matcher"}],"type":"link","identifier":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/matcher","url":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/matcher"},"https://kolos65.github.io/Mockable/documentation/mockable/parameter":{"title":"Parameter<Value>","titleInlineContent":[{"type":"codeVoice","code":"Parameter<Value>"}],"type":"link","identifier":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/parameter","url":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/parameter"},"https://kolos65.github.io/Mockable/documentation/mockable/propertyactionbuilder/performonset(_:)":{"title":"performOnSet(_ action:)","titleInlineContent":[{"type":"codeVoice","code":"performOnSet(_ action:)"}],"type":"link","identifier":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/propertyactionbuilder\/performonset(_:)","url":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/propertyactionbuilder\/performonset(_:)"},"https://kolos65.github.io/Mockable/documentation/mockable/propertyactionbuilder/performonget(_:)":{"title":"performOnGet(_ action:)","titleInlineContent":[{"type":"codeVoice","code":"performOnGet(_ action:)"}],"type":"link","identifier":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/propertyactionbuilder\/performonget(_:)","url":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/propertyactionbuilder\/performonget(_:)"},"https://kolos65.github.io/Mockable/documentation/mockable/propertyverifybuilder/setcalled(_:file:line:)":{"title":"setCalled(_:)","titleInlineContent":[{"type":"codeVoice","code":"setCalled(_:)"}],"type":"link","identifier":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/propertyverifybuilder\/setcalled(_:file:line:)","url":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/propertyverifybuilder\/setcalled(_:file:line:)"},"https://kolos65.github.io/Mockable/documentation/mockable/functionreturnbuilder/willreturn(_:)":{"title":"willReturn(_ value:)","titleInlineContent":[{"type":"codeVoice","code":"willReturn(_ value:)"}],"type":"link","identifier":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/functionreturnbuilder\/willreturn(_:)","url":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/functionreturnbuilder\/willreturn(_:)"},"https://kolos65.github.io/Mockable/documentation/mockable/propertyverifybuilder/setcalledeventually(_:before:file:line:)":{"title":"setSalledEventually(_:before:)","titleInlineContent":[{"type":"codeVoice","code":"setSalledEventually(_:before:)"}],"type":"link","identifier":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/propertyverifybuilder\/setcalledeventually(_:before:file:line:)","url":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/propertyverifybuilder\/setcalledeventually(_:before:file:line:)"},"https://github.com/pointfreeco/swift-issue-reporting":{"title":"swift-issue-reporting","titleInlineContent":[{"type":"text","text":"swift-issue-reporting"}],"type":"link","identifier":"https:\/\/github.com\/pointfreeco\/swift-issue-reporting","url":"https:\/\/github.com\/pointfreeco\/swift-issue-reporting"},"https://kolos65.github.io/Mockable/documentation/mockable/mocked":{"title":"Mocked","titleInlineContent":[{"type":"codeVoice","code":"Mocked"}],"type":"link","identifier":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/mocked","url":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/mocked"},"https://kolos65.github.io/Mockable/documentation/mockable/propertyverifybuilder/getcalled(_:file:line:)":{"title":"getCalled(_:)","titleInlineContent":[{"type":"codeVoice","code":"getCalled(_:)"}],"type":"link","identifier":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/propertyverifybuilder\/getcalled(_:file:line:)","url":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/propertyverifybuilder\/getcalled(_:file:line:)"},"doc://Mockable/documentation/Mockable/Installation":{"role":"article","title":"Installation","abstract":[{"type":"text","text":"Learn how to install "},{"type":"strong","inlineContent":[{"type":"text","text":"Mockable"}]},{"type":"text","text":" and integrate into your targets."}],"identifier":"doc:\/\/Mockable\/documentation\/Mockable\/Installation","kind":"article","type":"topic","url":"\/documentation\/mockable\/installation"},"https://kolos65.github.io/Mockable/documentation/mockable/throwingfunctionreturnbuilder/willthrow(_:)":{"title":"willThrow(_ error:)","titleInlineContent":[{"type":"codeVoice","code":"willThrow(_ error:)"}],"type":"link","identifier":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/throwingfunctionreturnbuilder\/willthrow(_:)","url":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/throwingfunctionreturnbuilder\/willthrow(_:)"},"https://developer.apple.com/documentation/swift/optionset":{"title":"option set","titleInlineContent":[{"type":"text","text":"option set"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/optionset","url":"https:\/\/developer.apple.com\/documentation\/swift\/optionset"},"https://kolos65.github.io/Mockable/documentation/mockable/functionverifybuilder/calledeventually(_:before:file:line:)":{"title":"calledEventually(_:before:)","titleInlineContent":[{"type":"codeVoice","code":"calledEventually(_:before:)"}],"type":"link","identifier":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/functionverifybuilder\/calledeventually(_:before:file:line:)","url":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/functionverifybuilder\/calledeventually(_:before:file:line:)"},"https://kolos65.github.io/Mockable/documentation/mockable/mockerpolicy":{"title":"MockerPolicy","titleInlineContent":[{"type":"codeVoice","code":"MockerPolicy"}],"type":"link","identifier":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/mockerpolicy","url":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/mockerpolicy"},"doc://Mockable/documentation/Mockable":{"role":"collection","title":"Mockable","abstract":[{"type":"text","text":"A macro driven testing framework that provides automatic mock implementations for your protocols. It offers an intuitive declarative syntax that simplifies the process of mocking services in unit tests."}],"identifier":"doc:\/\/Mockable\/documentation\/Mockable","kind":"symbol","type":"topic","url":"\/documentation\/mockable"},"doc://Mockable/documentation/Mockable/Configuration":{"role":"article","title":"Configuration","abstract":[{"type":"text","text":"Learn how to configure build settings so generated mock implementations are excluded from release builds."}],"identifier":"doc:\/\/Mockable\/documentation\/Mockable\/Configuration","kind":"article","type":"topic","url":"\/documentation\/mockable\/configuration"},"https://kolos65.github.io/Mockable/documentation/mockable/throwingfunctionreturnbuilder/willproduce(_:)":{"title":"willProduce(_ producer)","titleInlineContent":[{"type":"codeVoice","code":"willProduce(_ producer)"}],"type":"link","identifier":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/throwingfunctionreturnbuilder\/willproduce(_:)","url":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/throwingfunctionreturnbuilder\/willproduce(_:)"},"https://kolos65.github.io/Mockable/documentation/mockable/propertyverifybuilder/getcalledeventually(_:before:file:line:)":{"title":"getCalledEventually(_:before:)","titleInlineContent":[{"type":"codeVoice","code":"getCalledEventually(_:before:)"}],"type":"link","identifier":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/propertyverifybuilder\/getcalledeventually(_:before:file:line:)","url":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/propertyverifybuilder\/getcalledeventually(_:before:file:line:)"},"https://kolos65.github.io/Mockable/documentation/mockable/functionverifybuilder/called(_:file:line:)":{"title":"called(_:)","titleInlineContent":[{"type":"codeVoice","code":"called(_:)"}],"type":"link","identifier":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/functionverifybuilder\/called(_:file:line:)","url":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/functionverifybuilder\/called(_:file:line:)"},"https://kolos65.github.io/Mockable/documentation/mockable/functionactionbuilder/perform(_:)":{"title":"perform(_ action)","titleInlineContent":[{"type":"codeVoice","code":"perform(_ action)"}],"type":"link","identifier":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/functionactionbuilder\/perform(_:)","url":"https:\/\/kolos65.github.io\/Mockable\/documentation\/mockable\/functionactionbuilder\/perform(_:)"}}}