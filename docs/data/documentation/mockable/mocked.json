{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Mocked"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Mocked"},{"type":"text","text":" in combination with a "},{"type":"codeVoice","code":"relaxedMocked"},{"type":"text","text":" option of "},{"type":"codeVoice","code":"MockerPolicy "},{"type":"text","text":"can be used"},{"type":"text","text":" "},{"type":"text","text":"to set an implicit return value for custom types:"}]},{"type":"codeListing","syntax":"swift","code":["struct Car {","    var name: String","    var seats: Int","}","","extension Car: Mocked {","    static var mock: Car {","        Car(name: \"Mock Car\", seats: 4)","    }","","    \/\/ Defaults to [mock] but we can ","    \/\/ provide a custom array of cars:","    static var mocks: [Car] {","        [","            Car(name: \"Mock Car 1\", seats: 4),","            Car(name: \"Mock Car 2\", seats: 4)","        ]","    }","}","","@Mockable","protocol CarService {","    func getCar() -> Car","    func getCars() -> [Car]","}","","func testCarService() {","    func test() {","        let mock = MockCarService(policy: .relaxedMocked)","        \/\/ Implictly mocked without a given registration:","        let car = mock.getCar()","        let cars = mock.getCars()","    }","}"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/mockable\/mocked"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/Mockable\/documentation\/Mockable\/Swift\/Array","doc:\/\/Mockable\/documentation\/Mockable\/Swift\/Optional"],"kind":"relationships","title":"Conforming Types","type":"conformingTypes"}],"identifier":{"url":"doc:\/\/Mockable\/documentation\/Mockable\/Mocked","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A protocol that represents auto-mocked types."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Mocked"}],"title":"Mocked","roleHeading":"Protocol","role":"symbol","symbolKind":"protocol","externalID":"s:8Mockable6MockedP","modules":[{"name":"Mockable"}],"navigatorTitle":[{"kind":"identifier","text":"Mocked"}]},"hierarchy":{"paths":[["doc:\/\/Mockable\/documentation\/Mockable"]]},"topicSections":[{"title":"Type Properties","identifiers":["doc:\/\/Mockable\/documentation\/Mockable\/Mocked\/mock","doc:\/\/Mockable\/documentation\/Mockable\/Mocked\/mocks-5zx6c"]}],"references":{"doc://Mockable/documentation/Mockable":{"role":"collection","title":"Mockable","abstract":[{"type":"text","text":"A macro driven testing framework that provides automatic mock implementations for your protocols. It offers an intuitive declarative syntax that simplifies the process of mocking services in unit tests."}],"identifier":"doc:\/\/Mockable\/documentation\/Mockable","kind":"symbol","type":"topic","url":"\/documentation\/mockable"},"doc://Mockable/documentation/Mockable/Mocked/mock":{"role":"symbol","title":"mock","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"mock"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"}],"abstract":[{"type":"text","text":"A default mock return value to use when "},{"type":"codeVoice","code":".relaxedMocked"},{"type":"text","text":" policy is set."}],"identifier":"doc:\/\/Mockable\/documentation\/Mockable\/Mocked\/mock","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/mockable\/mocked\/mock"},"doc://Mockable/documentation/Mockable/Swift/Array":{"conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Mocked"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"Array","fragments":[{"kind":"keyword","text":"extension"},{"kind":"text","text":" "},{"kind":"identifier","text":"Array","preciseIdentifier":"s:Sa"}],"abstract":[],"identifier":"doc:\/\/Mockable\/documentation\/Mockable\/Swift\/Array","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Array"}],"url":"\/documentation\/mockable\/swift\/array"},"doc://Mockable/documentation/Mockable/Mocked":{"role":"symbol","title":"Mocked","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Mocked"}],"abstract":[{"type":"text","text":"A protocol that represents auto-mocked types."}],"identifier":"doc:\/\/Mockable\/documentation\/Mockable\/Mocked","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Mocked"}],"url":"\/documentation\/mockable\/mocked"},"doc://Mockable/documentation/Mockable/Swift/Optional":{"conformance":{"constraints":[{"type":"codeVoice","code":"Wrapped"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Mocked"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"Optional","fragments":[{"kind":"keyword","text":"extension"},{"kind":"text","text":" "},{"kind":"identifier","text":"Optional","preciseIdentifier":"s:Sq"}],"abstract":[],"identifier":"doc:\/\/Mockable\/documentation\/Mockable\/Swift\/Optional","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Optional"}],"url":"\/documentation\/mockable\/swift\/optional"},"doc://Mockable/documentation/Mockable/Mocked/mocks-5zx6c":{"defaultImplementations":1,"role":"symbol","title":"mocks","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"mocks"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"]"}],"abstract":[{"type":"text","text":"An array of mock values to use as return values when "},{"type":"codeVoice","code":".relaxedMocked"},{"type":"text","text":" policy is set."},{"type":"text","text":" "},{"type":"text","text":"Defaults to "},{"type":"codeVoice","code":"[Self.mock]"},{"type":"text","text":"."}],"identifier":"doc:\/\/Mockable\/documentation\/Mockable\/Mocked\/mocks-5zx6c","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/mockable\/mocked\/mocks-5zx6c"}}}