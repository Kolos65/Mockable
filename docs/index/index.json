{"interfaceLanguages":{"swift":[{"children":[{"title":"Guides","type":"groupMarker"},{"path":"\/documentation\/mockable\/installation","title":"Installation","type":"article"},{"path":"\/documentation\/mockable\/configuration","title":"Configuration","type":"article"},{"path":"\/documentation\/mockable\/usage","title":"Usage","type":"article"},{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/mockable\/matcher\/comparator","title":"Matcher.Comparator","type":"typealias"},{"path":"\/documentation\/mockable\/matcher\/elementcomparator","title":"Matcher.ElementComparator","type":"typealias"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/mockable\/matcher\/comparator(for:)-42f3b","title":"static func comparator<T>(for: T.Type) -> Matcher.Comparator<T>?","type":"method"},{"path":"\/documentation\/mockable\/matcher\/comparator(for:)-5v4au","title":"static func comparator<T>(for: T.Type) -> Matcher.Comparator<T>?","type":"method"},{"path":"\/documentation\/mockable\/matcher\/comparator(for:)-68pdt","title":"static func comparator<T>(for: T.Type) -> Matcher.Comparator<T>?","type":"method"},{"path":"\/documentation\/mockable\/matcher\/comparator(for:)-6bzwu","title":"static func comparator<T>(for: T.Type) -> Matcher.Comparator<T>?","type":"method"},{"path":"\/documentation\/mockable\/matcher\/register(_:)-2ryjq","title":"static func register<T>(T.Type)","type":"method"},{"path":"\/documentation\/mockable\/matcher\/register(_:)-7avjs","title":"static func register<T>(T.Type.Type)","type":"method"},{"path":"\/documentation\/mockable\/matcher\/register(_:match:)","title":"static func register<T>(T.Type, match: Matcher.Comparator<T>)","type":"method"},{"path":"\/documentation\/mockable\/matcher\/reset()","title":"static func reset()","type":"method"}],"path":"\/documentation\/mockable\/matcher","title":"Matcher","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/mockable\/memberaction\/init(member:action:)","title":"init(member: Member, action: () -> Void)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/mockable\/memberaction\/action","title":"let action: () -> Void","type":"property"},{"path":"\/documentation\/mockable\/memberaction\/member","title":"let member: Member","type":"property"}],"path":"\/documentation\/mockable\/memberaction","title":"MemberAction","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/mockable\/memberreturn\/init(member:returnvalue:)","title":"init(member: Member, returnValue: ReturnValue)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/mockable\/memberreturn\/member","title":"let member: Member","type":"property"},{"path":"\/documentation\/mockable\/memberreturn\/returnvalue","title":"let returnValue: ReturnValue","type":"property"}],"path":"\/documentation\/mockable\/memberreturn","title":"MemberReturn","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/mockable\/mocker\/init(policy:)","title":"init(policy: MockerPolicy?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/mockable\/mocker\/policy","title":"var policy: MockerPolicy?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/mockable\/mocker\/addaction(_:for:)","title":"func addAction(() -> Void, for: Mocker<Service>.Member)","type":"method"},{"path":"\/documentation\/mockable\/mocker\/addinvocation(for:)","title":"func addInvocation(for: Mocker<Service>.Member)","type":"method"},{"path":"\/documentation\/mockable\/mocker\/addreturnvalue(_:for:)","title":"func addReturnValue(ReturnValue, for: Mocker<Service>.Member)","type":"method"},{"path":"\/documentation\/mockable\/mocker\/mock(_:producerresolver:)-1bm9q","title":"func mock<V>(Mocker<Service>.Member, producerResolver: (Any) throws -> V) -> V","type":"method"},{"path":"\/documentation\/mockable\/mocker\/mock(_:producerresolver:)-33gkm","title":"func mock<V>(Mocker<Service>.Member, producerResolver: (Any) throws -> V) -> V","type":"method"},{"path":"\/documentation\/mockable\/mocker\/mock(_:producerresolver:)-5a2n5","title":"func mock<V>(Mocker<Service>.Member, producerResolver: (Any) throws -> V) -> V","type":"method"},{"path":"\/documentation\/mockable\/mocker\/mock(_:producerresolver:)-8t1je","title":"func mock<V>(Mocker<Service>.Member, producerResolver: (Any) throws -> V) -> V","type":"method"},{"path":"\/documentation\/mockable\/mocker\/mock(_:producerresolver:)-93adc","title":"func mock(Mocker<Service>.Member, producerResolver: (Any) throws -> Void)","type":"method"},{"path":"\/documentation\/mockable\/mocker\/mockthrowing(_:producerresolver:)-12v7m","title":"func mockThrowing<V>(Mocker<Service>.Member, producerResolver: (Any) throws -> V) throws -> V","type":"method"},{"path":"\/documentation\/mockable\/mocker\/mockthrowing(_:producerresolver:)-1yndu","title":"func mockThrowing<V>(Mocker<Service>.Member, producerResolver: (Any) throws -> V) throws -> V","type":"method"},{"path":"\/documentation\/mockable\/mocker\/mockthrowing(_:producerresolver:)-7014b","title":"func mockThrowing<V>(Mocker<Service>.Member, producerResolver: (Any) throws -> V) throws -> V","type":"method"},{"path":"\/documentation\/mockable\/mocker\/mockthrowing(_:producerresolver:)-8c9f6","title":"func mockThrowing(Mocker<Service>.Member, producerResolver: (Any) throws -> Void) throws","type":"method"},{"path":"\/documentation\/mockable\/mocker\/mockthrowing(_:producerresolver:)-8gq9z","title":"func mockThrowing<V>(Mocker<Service>.Member, producerResolver: (Any) throws -> V) throws -> V","type":"method"},{"path":"\/documentation\/mockable\/mocker\/performactions(for:)","title":"func performActions(for: Mocker<Service>.Member)","type":"method"},{"path":"\/documentation\/mockable\/mocker\/reset(scopes:)","title":"func reset(scopes: Set<MockerScope>)","type":"method"},{"path":"\/documentation\/mockable\/mocker\/verify(member:count:fileid:filepath:line:column:)","title":"func verify(member: Mocker<Service>.Member, count: Count, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt)","type":"method"},{"path":"\/documentation\/mockable\/mocker\/verify(member:count:timeout:fileid:filepath:line:column:)","title":"func verify(member: Mocker<Service>.Member, count: Count, timeout: TimeoutDuration, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) async","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/mockable\/mocker\/action","title":"Mocker.Action","type":"typealias"},{"path":"\/documentation\/mockable\/mocker\/member","title":"Mocker.Member","type":"typealias"},{"path":"\/documentation\/mockable\/mocker\/return","title":"Mocker.Return","type":"typealias"}],"path":"\/documentation\/mockable\/mocker","title":"Mocker","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/mockable\/builder\/service","title":"Service","type":"associatedtype"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/mockable\/builder\/init(mocker:)","title":"init(mocker: Mocker<Self.Service>)","type":"init"}],"path":"\/documentation\/mockable\/builder","title":"Builder","type":"protocol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/mockable\/caseidentifiable\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/mockable\/caseidentifiable\/id-9wczy","title":"var id: String","type":"property"}],"title":"CaseIdentifiable Implementations","type":"groupMarker"}],"path":"\/documentation\/mockable\/caseidentifiable\/id-1jsi4","title":"var id: String","type":"property"},{"children":[{"children":[{"path":"\/documentation\/mockable\/caseidentifiable\/name-11t6d","title":"var name: String","type":"property"}],"title":"CaseIdentifiable Implementations","type":"groupMarker"}],"path":"\/documentation\/mockable\/caseidentifiable\/name-6s2ru","title":"var name: String","type":"property"},{"children":[{"children":[{"path":"\/documentation\/mockable\/caseidentifiable\/parameters-7v72g","title":"var parameters: String","type":"property"}],"title":"CaseIdentifiable Implementations","type":"groupMarker"}],"path":"\/documentation\/mockable\/caseidentifiable\/parameters-1thvc","title":"var parameters: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/mockable\/caseidentifiable\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/mockable\/caseidentifiable","title":"CaseIdentifiable","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/mockable\/matchable\/match(_:)","title":"func match(Self) -> Bool","type":"method"}],"path":"\/documentation\/mockable\/matchable","title":"Matchable","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/mockable\/mockableservice\/actionbuilder","title":"ActionBuilder","type":"associatedtype"},{"path":"\/documentation\/mockable\/mockableservice\/member","title":"Member","type":"associatedtype"},{"path":"\/documentation\/mockable\/mockableservice\/returnbuilder","title":"ReturnBuilder","type":"associatedtype"},{"path":"\/documentation\/mockable\/mockableservice\/verifybuilder","title":"VerifyBuilder","type":"associatedtype"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/mockable\/mockableservice\/action","title":"MockableService.Action","type":"typealias"},{"path":"\/documentation\/mockable\/mockableservice\/return","title":"MockableService.Return","type":"typealias"}],"path":"\/documentation\/mockable\/mockableservice","title":"MockableService","type":"protocol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/mockable\/mocked\/mock","title":"static var mock: Self","type":"property"},{"children":[{"children":[{"path":"\/documentation\/mockable\/mocked\/mocks-70z9e","title":"static var mocks: [Self]","type":"property"}],"title":"Mocked Implementations","type":"groupMarker"}],"path":"\/documentation\/mockable\/mocked\/mocks-5zx6c","title":"static var mocks: [Self]","type":"property"}],"path":"\/documentation\/mockable\/mocked","title":"Mocked","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/mockable\/functionactionbuilder\/init(_:kind:)","title":"init(Mocker<T>, kind: FunctionActionBuilder<T, ParentBuilder>.Member)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/mockable\/functionactionbuilder\/perform(_:)","title":"func perform(() -> Void) -> ParentBuilder","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/mockable\/functionactionbuilder\/member","title":"FunctionActionBuilder.Member","type":"typealias"}],"path":"\/documentation\/mockable\/functionactionbuilder","title":"FunctionActionBuilder","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/mockable\/functionreturnbuilder\/init(_:kind:)","title":"init(Mocker<T>, kind: FunctionReturnBuilder<T, ParentBuilder, ReturnType, ProduceType>.Member)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/mockable\/functionreturnbuilder\/willproduce(_:)","title":"func willProduce(ProduceType) -> ParentBuilder","type":"method"},{"path":"\/documentation\/mockable\/functionreturnbuilder\/willreturn()","title":"func willReturn() -> ParentBuilder","type":"method"},{"path":"\/documentation\/mockable\/functionreturnbuilder\/willreturn(_:)","title":"func willReturn(ReturnType) -> ParentBuilder","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/mockable\/functionreturnbuilder\/member","title":"FunctionReturnBuilder.Member","type":"typealias"}],"path":"\/documentation\/mockable\/functionreturnbuilder","title":"FunctionReturnBuilder","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/mockable\/functionverifybuilder\/init(_:kind:)","title":"init(Mocker<T>, kind: FunctionVerifyBuilder<T, ParentBuilder>.Member)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/mockable\/functionverifybuilder\/called(_:fileid:filepath:line:column:)","title":"func called(Count, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) -> ParentBuilder","type":"method"},{"path":"\/documentation\/mockable\/functionverifybuilder\/calledeventually(_:before:fileid:filepath:line:column:)","title":"func calledEventually(Count, before: TimeoutDuration, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) async -> ParentBuilder","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/mockable\/functionverifybuilder\/member","title":"FunctionVerifyBuilder.Member","type":"typealias"}],"path":"\/documentation\/mockable\/functionverifybuilder","title":"FunctionVerifyBuilder","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/mockable\/genericvalue\/init(value:comparator:)","title":"init(value: Any, comparator: (Any, Any) -> Bool)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/mockable\/genericvalue\/comparator","title":"let comparator: (Any, Any) -> Bool","type":"property"},{"path":"\/documentation\/mockable\/genericvalue\/value","title":"let value: Any","type":"property"}],"path":"\/documentation\/mockable\/genericvalue","title":"GenericValue","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/mockable\/mockerpolicy\/init(rawvalue:)","title":"init(rawValue: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/mockable\/mockerpolicy\/rawvalue","title":"let rawValue: Int","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/mockable\/mockerpolicy\/default","title":"static var `default`: MockerPolicy","type":"property"},{"path":"\/documentation\/mockable\/mockerpolicy\/relaxed","title":"static let relaxed: MockerPolicy","type":"property"},{"path":"\/documentation\/mockable\/mockerpolicy\/relaxedmocked","title":"static let relaxedMocked: MockerPolicy","type":"property"},{"path":"\/documentation\/mockable\/mockerpolicy\/relaxednonthrowingvoid","title":"static let relaxedNonThrowingVoid: MockerPolicy","type":"property"},{"path":"\/documentation\/mockable\/mockerpolicy\/relaxedoptional","title":"static let relaxedOptional: MockerPolicy","type":"property"},{"path":"\/documentation\/mockable\/mockerpolicy\/relaxedthrowingvoid","title":"static let relaxedThrowingVoid: MockerPolicy","type":"property"},{"path":"\/documentation\/mockable\/mockerpolicy\/relaxedvoid","title":"static let relaxedVoid: MockerPolicy","type":"property"},{"path":"\/documentation\/mockable\/mockerpolicy\/strict","title":"static let strict: MockerPolicy","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/mockable\/mockerpolicy\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/mockable\/mockerpolicy\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/mockable\/mockerpolicy\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/mockable\/mockerpolicy\/contains(_:)","title":"func contains(Self) -> Bool","type":"method"},{"path":"\/documentation\/mockable\/mockerpolicy\/formintersection(_:)","title":"func formIntersection(Self)","type":"method"},{"path":"\/documentation\/mockable\/mockerpolicy\/formsymmetricdifference(_:)","title":"func formSymmetricDifference(Self)","type":"method"},{"path":"\/documentation\/mockable\/mockerpolicy\/formunion(_:)","title":"func formUnion(Self)","type":"method"},{"path":"\/documentation\/mockable\/mockerpolicy\/insert(_:)","title":"func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)","type":"method"},{"path":"\/documentation\/mockable\/mockerpolicy\/intersection(_:)","title":"func intersection(Self) -> Self","type":"method"},{"path":"\/documentation\/mockable\/mockerpolicy\/remove(_:)","title":"func remove(Self.Element) -> Self.Element?","type":"method"},{"path":"\/documentation\/mockable\/mockerpolicy\/symmetricdifference(_:)","title":"func symmetricDifference(Self) -> Self","type":"method"},{"path":"\/documentation\/mockable\/mockerpolicy\/union(_:)","title":"func union(Self) -> Self","type":"method"},{"path":"\/documentation\/mockable\/mockerpolicy\/update(with:)","title":"func update(with: Self.Element) -> Self.Element?","type":"method"}],"path":"\/documentation\/mockable\/mockerpolicy\/optionset-implementations","title":"OptionSet Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/mockable\/mockerpolicy\/init(_:)","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/mockable\/mockerpolicy\/init(arrayliteral:)","title":"init(arrayLiteral: Self.Element...)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/mockable\/mockerpolicy\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/mockable\/mockerpolicy\/isdisjoint(with:)","title":"func isDisjoint(with: Self) -> Bool","type":"method"},{"path":"\/documentation\/mockable\/mockerpolicy\/isstrictsubset(of:)","title":"func isStrictSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/mockable\/mockerpolicy\/isstrictsuperset(of:)","title":"func isStrictSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/mockable\/mockerpolicy\/issubset(of:)","title":"func isSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/mockable\/mockerpolicy\/issuperset(of:)","title":"func isSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/mockable\/mockerpolicy\/subtract(_:)","title":"func subtract(Self)","type":"method"},{"path":"\/documentation\/mockable\/mockerpolicy\/subtracting(_:)","title":"func subtracting(Self) -> Self","type":"method"}],"path":"\/documentation\/mockable\/mockerpolicy\/setalgebra-implementations","title":"SetAlgebra Implementations","type":"symbol"}],"path":"\/documentation\/mockable\/mockerpolicy","title":"MockerPolicy","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/mockable\/propertyactionbuilder\/init(_:kind:setkind:)","title":"init(Mocker<T>, kind: PropertyActionBuilder<T, ParentBuilder>.Member, setKind: PropertyActionBuilder<T, ParentBuilder>.Member)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/mockable\/propertyactionbuilder\/performonget(_:)","title":"func performOnGet(() -> Void) -> ParentBuilder","type":"method"},{"path":"\/documentation\/mockable\/propertyactionbuilder\/performonset(_:)","title":"func performOnSet(() -> Void) -> ParentBuilder","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/mockable\/propertyactionbuilder\/member","title":"PropertyActionBuilder.Member","type":"typealias"}],"path":"\/documentation\/mockable\/propertyactionbuilder","title":"PropertyActionBuilder","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/mockable\/propertyreturnbuilder\/init(_:kind:)","title":"init(Mocker<T>, kind: PropertyReturnBuilder<T, ParentBuilder, ReturnType>.Member)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/mockable\/propertyreturnbuilder\/willproduce(_:)","title":"func willProduce(() -> ReturnType) -> ParentBuilder","type":"method"},{"path":"\/documentation\/mockable\/propertyreturnbuilder\/willreturn(_:)","title":"func willReturn(ReturnType) -> ParentBuilder","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/mockable\/propertyreturnbuilder\/member","title":"PropertyReturnBuilder.Member","type":"typealias"}],"path":"\/documentation\/mockable\/propertyreturnbuilder","title":"PropertyReturnBuilder","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/mockable\/propertyverifybuilder\/init(_:kind:setkind:)","title":"init(Mocker<T>, kind: PropertyVerifyBuilder<T, ParentBuilder>.Member, setKind: PropertyVerifyBuilder<T, ParentBuilder>.Member)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/mockable\/propertyverifybuilder\/getcalled(_:fileid:filepath:line:column:)","title":"func getCalled(Count, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) -> ParentBuilder","type":"method"},{"path":"\/documentation\/mockable\/propertyverifybuilder\/getcalledeventually(_:before:fileid:filepath:line:column:)","title":"func getCalledEventually(Count, before: TimeoutDuration, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) async -> ParentBuilder","type":"method"},{"path":"\/documentation\/mockable\/propertyverifybuilder\/setcalled(_:fileid:filepath:line:column:)","title":"func setCalled(Count, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) -> ParentBuilder","type":"method"},{"path":"\/documentation\/mockable\/propertyverifybuilder\/setcalledeventually(_:before:fileid:filepath:line:column:)","title":"func setCalledEventually(Count, before: TimeoutDuration, fileID: StaticString, filePath: StaticString, line: UInt, column: UInt) async -> ParentBuilder","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/mockable\/propertyverifybuilder\/member","title":"PropertyVerifyBuilder.Member","type":"typealias"}],"path":"\/documentation\/mockable\/propertyverifybuilder","title":"PropertyVerifyBuilder","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/mockable\/throwingfunctionreturnbuilder\/init(_:kind:)","title":"init(Mocker<T>, kind: ThrowingFunctionReturnBuilder<T, ParentBuilder, ReturnType, ErrorType, ProduceType>.Member)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/mockable\/throwingfunctionreturnbuilder\/willproduce(_:)","title":"func willProduce(ProduceType) -> ParentBuilder","type":"method"},{"path":"\/documentation\/mockable\/throwingfunctionreturnbuilder\/willreturn()","title":"func willReturn() -> ParentBuilder","type":"method"},{"path":"\/documentation\/mockable\/throwingfunctionreturnbuilder\/willreturn(_:)","title":"func willReturn(ReturnType) -> ParentBuilder","type":"method"},{"path":"\/documentation\/mockable\/throwingfunctionreturnbuilder\/willthrow(_:)","title":"func willThrow(ErrorType) -> ParentBuilder","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/mockable\/throwingfunctionreturnbuilder\/member","title":"ThrowingFunctionReturnBuilder.Member","type":"typealias"}],"path":"\/documentation\/mockable\/throwingfunctionreturnbuilder","title":"ThrowingFunctionReturnBuilder","type":"struct"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/mockable\/timeouterror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/mockable\/timeouterror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/mockable\/timeouterror","title":"TimeoutError","type":"struct"},{"title":"Functions","type":"groupMarker"},{"path":"\/documentation\/mockable\/cast(_:)","title":"func cast<P>(Any) throws -> P","type":"func"},{"path":"\/documentation\/mockable\/given(_:)","title":"func given<T>(T) -> T.ReturnBuilder","type":"func"},{"path":"\/documentation\/mockable\/verify(_:)","title":"func verify<T>(T) -> T.VerifyBuilder","type":"func"},{"path":"\/documentation\/mockable\/when(_:)","title":"func when<T>(T) -> T.ActionBuilder","type":"func"},{"title":"Macros","type":"groupMarker"},{"path":"\/documentation\/mockable\/mockable()","title":"macro Mockable()","type":"macro"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/mockable\/throwingfunctionactionbuilder","title":"ThrowingFunctionActionBuilder","type":"typealias"},{"path":"\/documentation\/mockable\/throwingfunctionverifybuilder","title":"ThrowingFunctionVerifyBuilder","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/mockable\/count\/atleastonce","title":"case atLeastOnce","type":"case"},{"path":"\/documentation\/mockable\/count\/exactly(_:)","title":"case exactly(Int)","type":"case"},{"path":"\/documentation\/mockable\/count\/from(_:to:)","title":"case from(Int, to: Int)","type":"case"},{"path":"\/documentation\/mockable\/count\/less(than:)","title":"case less(than: Int)","type":"case"},{"path":"\/documentation\/mockable\/count\/lessorequal(to:)","title":"case lessOrEqual(to: Int)","type":"case"},{"path":"\/documentation\/mockable\/count\/more(than:)","title":"case more(than: Int)","type":"case"},{"path":"\/documentation\/mockable\/count\/moreorequal(to:)","title":"case moreOrEqual(to: Int)","type":"case"},{"path":"\/documentation\/mockable\/count\/never","title":"case never","type":"case"},{"path":"\/documentation\/mockable\/count\/once","title":"case once","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/mockable\/count\/init(integerliteral:)","title":"init(integerLiteral: Count.IntegerLiteralType)","type":"init"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/mockable\/count\/integerliteraltype","title":"Count.IntegerLiteralType","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/mockable\/count\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/mockable\/count\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/mockable\/count","title":"Count","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/mockable\/mockerscope\/given","title":"case given","type":"case"},{"path":"\/documentation\/mockable\/mockerscope\/verify","title":"case verify","type":"case"},{"path":"\/documentation\/mockable\/mockerscope\/when","title":"case when","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/mockable\/mockerscope\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/mockable\/mockerscope\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/mockable\/mockerscope","title":"MockerScope","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/mockable\/parameter\/any","title":"case any","type":"case"},{"path":"\/documentation\/mockable\/parameter\/matching(_:)","title":"case matching((Value) -> Bool)","type":"case"},{"path":"\/documentation\/mockable\/parameter\/value(_:)","title":"case value(Value)","type":"case"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/mockable\/parameter\/erasetogenericvalue()","title":"func eraseToGenericValue() -> Parameter<GenericValue>","type":"method"},{"path":"\/documentation\/mockable\/parameter\/match(_:)-4rnde","title":"func match(Parameter<Value>) -> Bool","type":"method"},{"path":"\/documentation\/mockable\/parameter\/match(_:)-6g8w8","title":"func match(Parameter<Value>) -> Bool","type":"method"},{"path":"\/documentation\/mockable\/parameter\/match(_:)-9xmwk","title":"func match(Parameter<Value>) -> Bool","type":"method"},{"path":"\/documentation\/mockable\/parameter\/match(_:)-lv22","title":"func match(Parameter<Value>) -> Bool","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/mockable\/parameter\/generic(_:)","title":"static func generic<T>(T) -> Parameter<GenericValue>","type":"method"}],"path":"\/documentation\/mockable\/parameter","title":"Parameter","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/mockable\/producercasterror\/typemismatch","title":"case typeMismatch","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/mockable\/producercasterror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/mockable\/producercasterror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/mockable\/producercasterror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/mockable\/producercasterror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/mockable\/producercasterror","title":"ProducerCastError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/mockable\/returnvalue\/produce(_:)","title":"case produce(Any)","type":"case"},{"path":"\/documentation\/mockable\/returnvalue\/return(_:)","title":"case `return`(Any)","type":"case"},{"path":"\/documentation\/mockable\/returnvalue\/throw(_:)","title":"case `throw`(Error)","type":"case"}],"path":"\/documentation\/mockable\/returnvalue","title":"ReturnValue","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/mockable\/timeoutduration\/miliseconds(_:)","title":"case miliseconds(UInt)","type":"case"},{"path":"\/documentation\/mockable\/timeoutduration\/seconds(_:)","title":"case seconds(Double)","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/mockable\/timeoutduration\/duration","title":"var duration: TimeInterval","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/mockable\/timeoutduration\/init(floatliteral:)","title":"init(floatLiteral: Double)","type":"init"}],"path":"\/documentation\/mockable\/timeoutduration\/expressiblebyfloatliteral-implementations","title":"ExpressibleByFloatLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/mockable\/timeoutduration\/init(integerliteral:)","title":"init(integerLiteral: Int)","type":"init"}],"path":"\/documentation\/mockable\/timeoutduration\/expressiblebyintegerliteral-implementations","title":"ExpressibleByIntegerLiteral Implementations","type":"symbol"}],"path":"\/documentation\/mockable\/timeoutduration","title":"TimeoutDuration","type":"enum"},{"title":"Extended Modules","type":"groupMarker"},{"children":[{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/mockable\/swift\/array\/mock","title":"static var mock: Array<Element>","type":"property"},{"path":"\/documentation\/mockable\/swift\/array\/mocks","title":"static var mocks: [Self]","type":"property"}],"path":"\/documentation\/mockable\/swift\/array\/mocked-implementations","title":"Mocked Implementations","type":"symbol"}],"path":"\/documentation\/mockable\/swift\/array","title":"Array","type":"extension"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/mockable\/swift\/set\/all","title":"static var all: Set<MockerScope>","type":"property"}],"path":"\/documentation\/mockable\/swift\/set","title":"Set","type":"extension"},{"title":"Extended Enumerations","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/mockable\/swift\/optional\/mock","title":"static var mock: Optional<Wrapped>","type":"property"},{"path":"\/documentation\/mockable\/swift\/optional\/mocks","title":"static var mocks: [Self]","type":"property"}],"path":"\/documentation\/mockable\/swift\/optional\/mocked-implementations","title":"Mocked Implementations","type":"symbol"}],"path":"\/documentation\/mockable\/swift\/optional","title":"Optional","type":"extension"}],"path":"\/documentation\/mockable\/swift","title":"Swift","type":"extension"}],"path":"\/documentation\/mockable","title":"Mockable","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":1}}